{"filter":false,"title":"annealer.py","tooltip":"/annealer.py","undoManager":{"mark":14,"position":14,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":2,"column":59},"action":"insert","lines":["from simanneal import Annealer","class TravellingSalesmanProblem(Annealer):","    \"\"\"Test annealer with a travelling salesman problem.\"\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":59},"end":{"row":3,"column":0},"action":"insert","lines":["",""]},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":0},"end":{"row":7,"column":67},"action":"insert","lines":["    def move(self):","        \"\"\"Swaps two cities in the route.\"\"\"","        a = random.randint(0, len(self.state) - 1)","        b = random.randint(0, len(self.state) - 1)","        self.state[a], self.state[b] = self.state[b], self.state[a]"]}]}],[{"group":"doc","deltas":[{"start":{"row":7,"column":67},"end":{"row":8,"column":0},"action":"insert","lines":["",""]},{"start":{"row":8,"column":0},"end":{"row":8,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":8,"column":4},"end":{"row":8,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":8,"column":0},"end":{"row":14,"column":16},"action":"insert","lines":["    def energy(self):","        \"\"\"Calculates the length of the route.\"\"\"","        e = 0","        for i in range(len(self.state)):","            e += self.distance(cities[self.state[i - 1]],","                          cities[self.state[i]])","        return e"]}]}],[{"group":"doc","deltas":[{"start":{"row":14,"column":16},"end":{"row":15,"column":0},"action":"insert","lines":["",""]},{"start":{"row":15,"column":0},"end":{"row":15,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":4},"end":{"row":15,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":16,"column":46},"action":"insert","lines":["initial_state = ['New York', 'Los Angeles', 'Boston', 'Houston']","tsp = TravellingSalesmanProblem(initial_state)"]}]}],[{"group":"doc","deltas":[{"start":{"row":16,"column":46},"end":{"row":17,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["itinerary, miles = tsp.anneal()",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["from simanneal import Annealer","class TravellingSalesmanProblem(Annealer):","    \"\"\"Test annealer with a travelling salesman problem.\"\"\"","    def move(self):","        \"\"\"Swaps two cities in the route.\"\"\"","        a = random.randint(0, len(self.state) - 1)","        b = random.randint(0, len(self.state) - 1)","        self.state[a], self.state[b] = self.state[b], self.state[a]","    def energy(self):","        \"\"\"Calculates the length of the route.\"\"\"","        e = 0","        for i in range(len(self.state)):","            e += self.distance(cities[self.state[i - 1]],","                          cities[self.state[i]])","        return e","initial_state = ['New York', 'Los Angeles', 'Boston', 'Houston']","tsp = TravellingSalesmanProblem(initial_state)","itinerary, miles = tsp.anneal()",""]},{"start":{"row":0,"column":0},"end":{"row":90,"column":0},"action":"insert","lines":["from __future__ import print_function","import math","import random","from simanneal import Annealer","","","def distance(a, b):","    \"\"\"Calculates distance between two latitude-longitude coordinates.\"\"\"","    R = 3963  # radius of Earth (miles)","    lat1, lon1 = math.radians(a[0]), math.radians(a[1])","    lat2, lon2 = math.radians(b[0]), math.radians(b[1])","    return math.acos(math.sin(lat1) * math.sin(lat2) +","                     math.cos(lat1) * math.cos(lat2) * math.cos(lon1 - lon2)) * R","","","class TravellingSalesmanProblem(Annealer):","","    \"\"\"Test annealer with a travelling salesman problem.","    \"\"\"","    ","    # pass extra data (the distance matrix) into the constructor","    def __init__(self, state, distance_matrix):","        self.distance_matrix = distance_matrix","        super(TravellingSalesmanProblem, self).__init__(state)  # important! ","","    def move(self):","        \"\"\"Swaps two cities in the route.\"\"\"","        a = random.randint(0, len(self.state) - 1)","        b = random.randint(0, len(self.state) - 1)","        self.state[a], self.state[b] = self.state[b], self.state[a]","","    def energy(self):","        \"\"\"Calculates the length of the route.\"\"\"","        e = 0","        for i in range(len(self.state)):","            e += self.distance_matrix[self.state[i-1]][self.state[i]]","        return e","","","","if __name__ == '__main__':","","    # latitude and longitude for the twenty largest U.S. cities","    cities = {","        'New York City': (40.72, 74.00),","        'Los Angeles': (34.05, 118.25),","        'Chicago': (41.88, 87.63),","        'Houston': (29.77, 95.38),","        'Phoenix': (33.45, 112.07),","        'Philadelphia': (39.95, 75.17),","        'San Antonio': (29.53, 98.47),","        'Dallas': (32.78, 96.80),","        'San Diego': (32.78, 117.15),","        'San Jose': (37.30, 121.87),","        'Detroit': (42.33, 83.05),","        'San Francisco': (37.78, 122.42),","        'Jacksonville': (30.32, 81.70),","        'Indianapolis': (39.78, 86.15),","        'Austin': (30.27, 97.77),","        'Columbus': (39.98, 82.98),","        'Fort Worth': (32.75, 97.33),","        'Charlotte': (35.23, 80.85),","        'Memphis': (35.12, 89.97),","        'Baltimore': (39.28, 76.62)","    }","","    # initial state, a randomly-ordered itinerary","    init_state = list(cities.keys())","    random.shuffle(init_state)","","    # create a distance matrix","    distance_matrix = {}","    for ka, va in cities.items():","        distance_matrix[ka] = {}","        for kb, vb in cities.items():","            if kb == ka:","                distance_matrix[ka][kb] = 0.0","            else:","                distance_matrix[ka][kb] = distance(va, vb)","","    tsp = TravellingSalesmanProblem(init_state, distance_matrix)","    # since our state is just a list, slice is the fastest way to copy","    tsp.copy_strategy = \"slice\"  ","    state, e = tsp.anneal()","","    while state[0] != 'New York City':","        state = state[1:] + state[:1]  # rotate NYC to start","    print(\"%i mile route:\" % e)","    for city in state:","        print(\"\\t\", city)",""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":23,"column":67},"end":{"row":23,"column":68},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":99,"mode":"ace/mode/python"}},"timestamp":1421785970000,"hash":"589af8e1e9f481ec3d328fdc8d6e1165a67458a4"}